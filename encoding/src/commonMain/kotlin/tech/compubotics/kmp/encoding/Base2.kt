package tech.compubotics.kmp.encoding

/**
 * The `Base2` object provides functionality for encoding and decoding binary data
 * in a binary string representation (Base2). It implements the `Coder` interface,
 * offering methods to convert data between raw binary (ByteArray) and a human-readable
 * encoded binary string or byte array format.
 */
object Base2 : Coder {
    /**
     * Encodes the given binary data into a transformed byte array representation.
     *
     * This method removes any spaces from the string representation generated by
     * `encodeToString` and converts the resulting string into a byte array.
     *
     * @param data The input ByteArray to be encoded.
     * @return A ByteArray containing the encoded representation of the input data
     *         without spaces.
     */
    override fun encode(data: ByteArray): ByteArray {
        return encodeToString(data).replace(" ", "").encodeToByteArray()
    }

    /**
     * Encodes the given binary data into a binary-encoded string representation.
     *
     * This method converts each byte in the provided ByteArray into its binary
     * string representation using an internal helper function. The binary values
     * are then concatenated into a single string, separated by spaces. If the
     * input ByteArray is empty, an empty string is returned.
     *
     * @param data The input ByteArray to be encoded. Each byte will be
     *             transformed into an 8-character binary string.
     * @return A String representing the binary-encoded form of the data,
     *         with each byte's binary value separated by spaces. Returns
     *         an empty string if the input ByteArray is empty.
     */
    override fun encodeToString(data: ByteArray): String {
        return data.joinToString("") { byte ->
            // Convert byte to unsigned integer (0-255) and format as 8-bit binary
            (byte.toInt() and 0xFF).toString(2).padStart(8, '0')
        }
    }

    /**
     * Decodes a Base2-encoded string into its original binary representation as a ByteArray.
     *
     * This method processes the input string by interpreting each 8-character binary chunk
     * into its corresponding Byte value. It validates the input to ensure it adheres to
     * the Base2 format before decoding.
     *
     * @param data The Base2-encoded string to decode. It must contain only valid binary characters
     *             ('0' and '1') and have a length that is a multiple of 8.
     * @return A ByteArray containing the decoded binary data.
     * @throws IllegalArgumentException If the input string is not a valid Base2 representation.
     */
    @Throws(IllegalArgumentException::class)
    override fun decode(data: String): ByteArray {
        val withoutSpaces = data.replace(" ", "")
        validateBase2String(withoutSpaces)
        return withoutSpaces.chunked(8).map { binaryByte ->
            binaryByte.toInt(2).toByte()
        }.toByteArray()
    }

    /**
     * Decodes an encoded ByteArray back into its original form.
     *
     * This method processes the input ByteArray by interpreting each chunk of 8 binary bits (encoded as characters)
     * into its corresponding Byte value. The input is validated to ensure its size is a multiple of 8 bytes,
     * which is necessary for proper decoding.
     *
     * @param data The encoded ByteArray to be decoded. It must have a size that is a multiple of 8 bytes.
     * @return A ByteArray containing the original binary data after being decoded.
     *         If the input array is empty, an empty ByteArray is returned.
     * @throws IllegalArgumentException If the input ByteArray size is not a multiple of 8 bytes.
     */
    @Throws(IllegalArgumentException::class)
    override fun decode(data: ByteArray): ByteArray {
        // Convert byte array to binary string (assuming UTF-8 encoding)
        val binaryString = data.decodeToString().replace(" ", "")
        return decode(binaryString)
    }

    /**
     * Validates that the given string represents a correctly formatted Base2 binary sequence.
     *
     * The method ensures that:
     * - The length of the string is a multiple of 8.
     * - The string contains only valid binary characters ('0' or '1').
     *
     * @param data The input string to be validated as a Base2 binary sequence.
     *             The string must adhere to the following constraints:
     *             - Length must be a multiple of 8.
     *             - Must contain only the characters '0' and '1'.
     * @throws IllegalArgumentException If the string length is not a multiple of 8.
     * @throws IllegalArgumentException If the string contains characters other than '0' or '1'.
     */
    @Throws(IllegalArgumentException::class)
    private fun validateBase2String(data: String) {
        require(data.length % 8 == 0) {
            "Invalid Base2: Length must be multiple of 8 (got ${data.length})"
        }

        val invalidChars = data.filter { it !in '0'..'1' }
        require(invalidChars.isEmpty()) {
            val uniqueInvalid = invalidChars.toSet().joinToString { "'$it'" }
            "Invalid Base2: Contains illegal characters: $uniqueInvalid"
        }
    }
}
